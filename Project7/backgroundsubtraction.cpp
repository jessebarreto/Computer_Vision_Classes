/*******************************************************************************************
 * Universidade de Brasília – UnB
 * Instituto de Ciências Exatas – IE
 * Departamento de Ciência da Computação – CIC
 * Visao Computacional – Professor Fabio Vidal
 *
 * Projeto 7 – Objetivo
 * Esta atividade tem como objetivo principal o desenvolvimento de melhorias para a detecção de movimento em imagens
 * sequenciais utilizando fluxo óptico.
 *
 * Requisito 2
 * Compare os resultados (melhorias ou pioras) desta versão desenvolvida em relação à técnica clássica de Background
 * Subtraction (http://docs.opencv.org/trunk/d1/dc5/tutorial_background_subtraction.html). Realize as análises sob o
 * ponto de vista da precisão do processo de detecção de veículos, bem como argumentando sobre a sua precisão na
 * detecção, tempo de execução e acurácia.
 *
 * Requisito 3
 * Descreva os resultados alcançados no relatório.
 *
 * Nome: Jessé Barreto de Barros
 * Matrícula: 17/0067033
 *********************************************************************************************
*/

#include <opencv2/core.hpp>
#include <opencv2/imgproc.hpp>
#include <opencv2/video.hpp>
#include <opencv2/highgui.hpp>
#include <iostream>
#include <chrono>

//#include "project7.h"

                                                            //  a   d   e   t       or  a   d   e   t
#define DEFAULT_FILE1 "Data/highwayI_raw.avi"               //  1.5 20 25   35      or  1   15  15  49
#define DEFAULT_FILE2 "Data/Bsb-EPGU.mov"                   //  55  23  25  80      or  1   12  12  34
#define DEFAULT_FILE3 "Data/Bsb-EixoRodoviarioSul.mov"      //  10  12  12  35      or  66  44  44  98
#define DEFAULT_FILE4 "Data/viptraffic.mp4"                 //  1   10  15  28      or  15  5   5   36

#define DEFAULT_VIDEO_FILE DEFAULT_FILE4
#define VIDEO_SPEED_RATE 1 // Can not be zero

#define USE_MORPH_OPEN_CLOSE 1

#define ORIGINAL_WIN_NAME "Original Video"
#define FOREGROUND_MASK_WIN_NAME "Foreground Mask"

int main(int argc, char **argv)
{
    // Open Video File
    std::string fileName;
    if (argc < 2) {
        fileName = DEFAULT_VIDEO_FILE;
        std::cout << "[WARNING] Parameter not found - Opening default video file at "
                  << fileName << std::endl;
    } else {
        fileName = argv[1];
    }
    cv::VideoCapture video(fileName);
    if (!video.isOpened()) {
        std::cout << "[ERROR] Could not open video file at " << fileName << std::endl;
        return -1;
    }

    // Run Video
    cv::namedWindow(ORIGINAL_WIN_NAME, CV_WINDOW_NORMAL);
    cv::resizeWindow(ORIGINAL_WIN_NAME, 640, 480);
    cv::namedWindow(FOREGROUND_MASK_WIN_NAME, CV_WINDOW_NORMAL);
    cv::resizeWindow(FOREGROUND_MASK_WIN_NAME, 640, 480);

    // Collection of Frames
    cv::Mat frame; // Current Frame
    cv::Mat foregroundMaskMOG2; //Foreground Mask generated by MOG2 method
    cv::Ptr<cv::BackgroundSubtractor> ptrSubtractor; //MOG2 Background subtractor

    // Subtractor Object
    ptrSubtractor = new cv::BackgroundSubtractorMOG2(1, 16);

    // Time Setup
    for (;;) {
        // Read the frames from video
        video >> frame;

        // Loop the video
        if (frame.empty()) {
            video.set(CV_CAP_PROP_POS_FRAMES, 0);
            continue;
        }

        // Exit if user press space
        if (cv::waitKey((1/VIDEO_SPEED_RATE) * 30) >= 0) {
            break;
        }

        // Count Time
        auto start = std::chrono::high_resolution_clock::now();

        // Create a foreground Mask
        ptrSubtractor->operator()(frame, foregroundMaskMOG2);

        // Show Images
        cv::imshow(ORIGINAL_WIN_NAME, frame);
        cv::imshow(FOREGROUND_MASK_WIN_NAME, foregroundMaskMOG2);

        // Print Time
        auto end = std::chrono::high_resolution_clock::now();
        auto dt = 1.e-6 * std::chrono::duration_cast<std::chrono::nanoseconds>(end-start).count();
        std::clog << dt << " ms elapsed" << std::endl;
    }

    return 0;
}

